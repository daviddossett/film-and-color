{"version":3,"sources":["components/TitleBar/TitleBar.tsx","firebase/config.js","components/Swatch/Swatch.tsx","components/Palette/Palette.tsx","components/HeroImage/HeroImage.tsx","components/App/App.tsx","hooks/useFirestore.tsx","serviceWorker.ts","index.tsx"],"names":["date","Date","toDateString","TitleBar","className","title","firebase","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","projectFirestore","FieldValue","serverTimestamp","Swatch","style","backgroundColor","color","isLoading","modelId","clarifai","Clarifai","App","Palette","image","useState","loading","setLoading","palette","setPalette","useEffect","a","models","predict","response","colors","outputs","data","generatedPalette","map","raw_hex","getPalette","length","shimmers","i","push","key","swatches","HeroImage","imageUrl","src","backgroundSize","backgroundRepeat","alt","logEvent","documents","collection","setDocuments","unsub","orderBy","onSnapshot","snapshot","forEach","doc","id","useFirestore","setImage","director","cinematographer","artDirector","url","movieInfo","footerInfo","href","target","rel","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.010336d2.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './TitleBar.css';\r\n\r\ninterface TitleBarProps {\r\n  title: string;\r\n  className?: string;\r\n}\r\n\r\nconst date = new Date().toDateString();\r\n\r\nexport const TitleBar: React.FC<TitleBarProps> = ({ className, title }) => {\r\n  return (\r\n    <div className={className}>\r\n      <span className={'date'}>{date}</span>\r\n      <h1 className={'title'}>{title}</h1>\r\n    </div>\r\n  );\r\n};\r\n","import * as firebase from 'firebase/app';\r\nimport 'firebase/storage';\r\nimport 'firebase/firestore';\r\nimport 'firebase/analytics';\r\n\r\n// Your web app's Firebase configuration\r\nvar firebaseConfig = {\r\n  apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\r\n  authDomain: 'film-and-color.firebaseapp.com',\r\n  databaseURL: 'https://film-and-color.firebaseio.com',\r\n  projectId: 'film-and-color',\r\n  storageBucket: 'film-and-color.appspot.com',\r\n  messagingSenderId: '656048480818',\r\n  appId: '1:656048480818:web:e98fc541c630bd94a7522b',\r\n  measurementId: 'G-YDNX20FLMX',\r\n};\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\nfirebase.analytics();\r\n\r\nexport const projectStorage = firebase.storage();\r\nexport const projectFirestore = firebase.firestore();\r\nexport const projectAnalytics = firebase.analytics();\r\nexport const timestamp = firebase.firestore.FieldValue.serverTimestamp;\r\n","import React from 'react';\r\nimport './Swatch.css';\r\n\r\nexport interface SwatchProps {\r\n  isLoading: boolean;\r\n  color?: string;\r\n  className?: string;\r\n}\r\n\r\nexport const Swatch: React.FC<SwatchProps> = ({ color, isLoading }) => {\r\n  const style = {\r\n    backgroundColor: color,\r\n  };\r\n\r\n  if (isLoading) return <div className={'loadingSwatch'} />;\r\n\r\n  return <div style={style} className={'swatchWrapper'} />;\r\n};\r\n","import React, { useState, useEffect } from 'react';\r\nimport Clarifai from 'clarifai';\r\n\r\nimport { Swatch } from '../Swatch/Swatch';\r\nimport './Palette.css';\r\n\r\ninterface PaletteProps {\r\n  image: any;\r\n  className?: any;\r\n}\r\n\r\nconst modelId = process.env.REACT_APP_CLARIFAI_MODEL_KEY;\r\n\r\nconst clarifai = new Clarifai.App({\r\n  apiKey: process.env.REACT_APP_CLARIFAI_API_KEY,\r\n});\r\n\r\nexport const Palette: React.FC<PaletteProps> = ({ image, className }) => {\r\n  const [loading, setLoading] = useState(true);\r\n  const [palette, setPalette] = useState([]);\r\n\r\n  useEffect(() => {\r\n    async function getPalette() {\r\n      let response = await clarifai.models.predict(modelId, image);\r\n      let colors = response.outputs[0].data.colors;\r\n      let generatedPalette = colors.map((color: any) => color.raw_hex);\r\n      setPalette(generatedPalette);\r\n    }\r\n    getPalette();\r\n  }, [image]);\r\n\r\n  useEffect(() => {\r\n    if (palette.length > 0) {\r\n      setLoading(false);\r\n    }\r\n  }, [setLoading, palette]);\r\n\r\n  if (loading) {\r\n    let shimmers = [];\r\n    let numberOfShimmers = 4;\r\n    for (let i = 0; i < numberOfShimmers; i++) {\r\n      shimmers.push(<Swatch key={i} isLoading={loading} />);\r\n    }\r\n    return <div className={`${className} palette-root`}>{shimmers}</div>;\r\n  }\r\n\r\n  let swatches = palette.map((color) => {\r\n    return <Swatch key={color} isLoading={loading} color={color} />;\r\n  });\r\n\r\n  return <div className={`${className} palette-root`}>{swatches}</div>;\r\n};\r\n","import React from 'react';\r\n\r\nimport './HeroImage.css';\r\n\r\ninterface HeroImageProps {\r\n  imageUrl: string;\r\n  className?: string;\r\n}\r\n\r\nexport const HeroImage: React.FC<HeroImageProps> = ({\r\n  imageUrl,\r\n  className,\r\n}) => {\r\n  const imageStyles = {\r\n    backgroundSize: 'contain',\r\n    backgroundRepeat: 'no-repeat',\r\n  };\r\n  return (\r\n    <img\r\n      src={imageUrl}\r\n      className={`${className} heroImageRoot`}\r\n      style={imageStyles}\r\n      alt={'Movie still to be analyzed'}\r\n    />\r\n  );\r\n};\r\n","import React, { useState, useEffect } from 'react';\r\nimport * as firebase from 'firebase';\r\n\r\nimport './App.css';\r\nimport { TitleBar } from '../TitleBar/TitleBar';\r\nimport { useFirestore } from '../../hooks/useFirestore';\r\nimport { Palette } from '../Palette/Palette';\r\nimport { HeroImage } from '../HeroImage/HeroImage';\r\n\r\nfunction App() {\r\n  firebase.analytics().logEvent('app_start');\r\n\r\n  const { documents } = useFirestore('images');\r\n  const [image, setImage] = useState('');\r\n  const [title, setTitle] = useState('The Grand Budapest Hotel');\r\n  const [director, setDirector] = useState('Wes Anderson');\r\n  const [cinematographer, setCinematographer] = useState('Robert D. Yeoman');\r\n  const [artDirector, setArtDirector] = useState(\r\n    'Stephan O. Gessler and Gerald Sullivan'\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (documents.length > 0) {\r\n      setImage(documents[0].url);\r\n    }\r\n  }, [documents, setImage]);\r\n\r\n  const movieInfo = (\r\n    <>\r\n      <p className={'info-1'}>Directed by {director}</p>\r\n      <p className={'info-2'}>\r\n        Cinematograpy by {cinematographer}. Art direction by {artDirector}\r\n      </p>\r\n    </>\r\n  );\r\n\r\n  const footerInfo = (\r\n    <>\r\n      <p className={'footer'}>\r\n        Inspired by&nbsp;\r\n        <a\r\n          href={'https://www.instagram.com/filmandcolor/?hl=en'}\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          Film and Color\r\n        </a>\r\n        .&nbsp;Made by&nbsp;\r\n        <a\r\n          href={'https://twitter.com/david_dossett'}\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          me\r\n        </a>\r\n      </p>\r\n    </>\r\n  );\r\n\r\n  return (\r\n    <div className={'grid-container'}>\r\n      <div className={'grid'}>\r\n        <TitleBar className={'titlebar'} title={title} />\r\n        <Palette className={'palette'} image={image} />\r\n        {movieInfo}\r\n        <HeroImage className={'image'} imageUrl={image} />\r\n        {footerInfo}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { useState, useEffect } from 'react';\r\nimport { projectFirestore } from '../firebase/config';\r\n\r\nexport const useFirestore = (collection: string) => {\r\n  const [documents, setDocuments] = useState<any>([]);\r\n\r\n  useEffect(() => {\r\n    const unsub = projectFirestore\r\n      .collection(collection)\r\n      .orderBy('createdAt', 'desc')\r\n      .onSnapshot((snapshot: any) => {\r\n        let documents: any[] = [];\r\n        snapshot.forEach((doc: any) => {\r\n          documents.push({ ...doc.data(), id: doc.id });\r\n        });\r\n        setDocuments(documents);\r\n      });\r\n\r\n    return () => unsub();\r\n  }, [collection]);\r\n\r\n  return { documents };\r\n};\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}