{"version":3,"sources":["components/HeroImage/HeroImage.tsx","components/Swatch/Swatch.tsx","components/Palette/Palette.tsx","components/App/App.tsx","serviceWorker.ts","index.tsx"],"names":["HeroImage","imageUrl","className","src","style","backgroundSize","backgroundRepeat","alt","Swatch","color","isLoading","backgroundColor","onMouseOver","window","analytics","track","hexValue","modelId","process","clarifai","Clarifai","App","apiKey","Palette","image","useState","loading","setLoading","palette","setPalette","useEffect","a","models","predict","response","colors","outputs","data","generatedPalette","map","raw_hex","getPalette","length","shimmers","i","push","key","swatches","href","target","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gTASaA,G,kBAAsC,SAAC,GAG7C,IAFLC,EAEI,EAFJA,SACAC,EACI,EADJA,UAMA,OACE,yBACEC,IAAKF,EACLC,UAAS,UAAKA,EAAL,kBACTE,MARgB,CAClBC,eAAgB,UAChBC,iBAAkB,aAOhBC,IAAK,Y,kDCREC,G,MAAgC,SAAC,GAA0B,IAAxBC,EAAuB,EAAvBA,MAAOC,EAAgB,EAAhBA,UAC/CN,EAAQ,CACZO,gBAAiBF,GASnB,OAAIC,EAAkB,yBAAKR,UAAW,kBAE/B,yBAAKE,MAAOA,EAAOF,UAAW,iBACnC,yBAAKA,UAAW,eACd,uBAAGU,YAVP,WACEC,OAAOC,UAAUC,MAAM,iBAAkB,CACvCC,SAAUP,KAQwBP,UAAW,OAAQO,OClBrDQ,G,MAAUC,oCAEVC,EAAW,IAAIC,IAASC,IAAI,CAChCC,OAAQJ,qCAGGK,EAAkC,SAAC,GAA0B,IAAxBC,EAAuB,EAAvBA,MAAOtB,EAAgB,EAAhBA,UAAgB,EACzCuB,oBAAS,GADgC,mBAChEC,EADgE,KACvDC,EADuD,OAEzCF,mBAAS,IAFgC,mBAEhEG,EAFgE,KAEvDC,EAFuD,KAoBvE,GAhBAC,qBAAU,WAAM,4CACd,gCAAAC,EAAA,sEACuBZ,EAASa,OAAOC,QAAQhB,EAASO,GADxD,OACMU,EADN,OAEMC,EAASD,EAASE,QAAQ,GAAGC,KAAKF,OAClCG,EAAmBH,EAAOI,KAAI,SAAC9B,GAAD,OAAgBA,EAAM+B,WACxDX,EAAWS,GAJb,4CADc,uBAAC,WAAD,wBAOdG,KACC,CAACjB,IAEJM,qBAAU,WACJF,EAAQc,OAAS,GACnBf,GAAW,KAEZ,CAACA,EAAYC,IAEZF,EAAS,CAGX,IAFA,IAAIiB,EAAW,GAENC,EAAI,EAAGA,EADO,EACeA,IACpCD,EAASE,KAAK,kBAAC,EAAD,CAAQC,IAAKF,EAAGlC,UAAWgB,KAE3C,OAAO,yBAAKxB,UAAS,UAAKA,EAAL,kBAAgCyC,GAGvD,IAAII,EAAWnB,EAAQW,KAAI,SAAC9B,GAC1B,OAAO,kBAAC,EAAD,CAAQqC,IAAKrC,EAAOC,UAAWgB,EAASjB,MAAOA,OAGxD,OAAO,yBAAKP,UAAS,UAAKA,EAAL,kBAAgC6C,IC5CjDvB,EAAQ,2DAyBCH,MAvBf,WACE,OACE,yBAAKnB,UAAW,QACd,gCACE,yBAAKA,UAAW,WACd,yBAAKA,UAAW,YAChB,yBAAKA,UAAW,YAChB,yBAAKA,UAAW,aAElB,wBAAIA,UAAW,SAAf,gBACA,uBAAGA,UAAW,YAAd,eAAsC,uBAAG8C,KAAM,gDAAiDC,OAAO,SAAjE,mBAExC,yBAAK/C,UAAW,iBACd,kBAAC,EAAD,CAAWA,UAAW,QAASD,SAAUuB,KAEzC,kBAAC,EAAD,CAAStB,UAAW,UAAWsB,MAAOA,IACxC,gCACE,sCAAW,uBAAGwB,KAAM,oCAAqCC,OAAO,SAArD,iBCbCC,QACW,cAA7BrC,OAAOsC,SAASC,UAEe,UAA7BvC,OAAOsC,SAASC,UAEhBvC,OAAOsC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.db090037.chunk.js","sourcesContent":["import React from 'react';\n\nimport './HeroImage.css';\n\ninterface HeroImageProps {\n  imageUrl: string;\n  className?: string;\n}\n\nexport const HeroImage: React.FC<HeroImageProps> = ({\n  imageUrl,\n  className,\n}) => {\n  const imageStyles = {\n    backgroundSize: 'contain',\n    backgroundRepeat: 'no-repeat',\n  };\n  return (\n    <img\n      src={imageUrl}\n      className={`${className} heroImageRoot`}\n      style={imageStyles}\n      alt={'Movie'}\n    />\n  );\n};\n","import React from 'react';\nimport './Swatch.css';\n\nexport interface SwatchProps {\n  isLoading: boolean;\n  color?: string;\n  className?: string;\n}\n\ndeclare global {\n  interface Window { analytics: any; }\n}\n\n\nexport const Swatch: React.FC<SwatchProps> = ({ color, isLoading }) => {\n  const style = {\n    backgroundColor: color,\n  };\n\n  function handleSwatchHover(): any {\n    window.analytics.track(\"Swatch hovered\", {\n      hexValue: color,\n    });\n  }\n\n  if (isLoading) return <div className={'loadingSwatch'} />;\n\n  return <div style={style} className={'swatchWrapper'}>\n    <div className={'hex-wrapper'}>\n      <p onMouseOver={handleSwatchHover}className={'hex'}>{color}</p>\n    </div>\n  </div>;\n};\n","import React, { useState, useEffect } from 'react';\nimport Clarifai from 'clarifai';\n\nimport { Swatch } from '../Swatch/Swatch';\nimport './Palette.css';\n\ninterface PaletteProps {\n  image: any;\n  className?: any;\n}\n\nconst modelId = process.env.REACT_APP_CLARIFAI_MODEL_KEY;\n\nconst clarifai = new Clarifai.App({\n  apiKey: process.env.REACT_APP_CLARIFAI_API_KEY,\n});\n\nexport const Palette: React.FC<PaletteProps> = ({ image, className }) => {\n  const [loading, setLoading] = useState(true);\n  const [palette, setPalette] = useState([]);\n\n  useEffect(() => {\n    async function getPalette() {\n      let response = await clarifai.models.predict(modelId, image);\n      let colors = response.outputs[0].data.colors;\n      let generatedPalette = colors.map((color: any) => color.raw_hex);\n      setPalette(generatedPalette);\n    }\n    getPalette();\n  }, [image]);\n\n  useEffect(() => {\n    if (palette.length > 0) {\n      setLoading(false);\n    }\n  }, [setLoading, palette]);\n\n  if (loading) {\n    let shimmers = [];\n    let numberOfShimmers = 4;\n    for (let i = 0; i < numberOfShimmers; i++) {\n      shimmers.push(<Swatch key={i} isLoading={loading} />);\n    }\n    return <div className={`${className} palette-root`}>{shimmers}</div>;\n  }\n\n  let swatches = palette.map((color) => {\n    return <Swatch key={color} isLoading={loading} color={color} />;\n  });\n\n  return <div className={`${className} palette-root`}>{swatches}</div>;\n};\n","import React from 'react';\n\nimport './App.css';\nimport { HeroImage } from '../HeroImage/HeroImage';\nimport { Palette } from '../Palette/Palette';\n\nconst image = 'https://www.itl.cat/pngfile/big/189-1897904_her-2013.jpg';\n\nfunction App() {\n  return (\n    <div className={'grid'}>\n      <header>\n        <div className={'circles'}>\n          <div className={'circle1'} />\n          <div className={'circle2'} />\n          <div className={'circle3'} />\n        </div>\n        <h1 className={'title'}>filmandcolor</h1>\n        <p className={'subtitle'}>Inspired by <a href={'https://www.instagram.com/filmandcolor/?hl=en'} target=\"blank\">@filmandcolor</a></p>\n      </header>\n      <div className={'image-wrapper'}>\n        <HeroImage className={'image'} imageUrl={image} />\n      </div>\n        <Palette className={'palette'} image={image} />\n      <footer>\n        <p>Made by <a href={'https://twitter.com/david_dossett'} target=\"blank\">me â†’</a></p>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}